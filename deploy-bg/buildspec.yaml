version: 0.2

phases:
  install:
    runtime-versions:
      docker: 18
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - IMAGE_TAG=`date +%s`
#      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - REPOSITORY_URI=$MY_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG $DOCKERFILE_PATH/
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:$IMAGE_TAG
#      - DIGEST=$(aws ecr describe-images --repository-name $IMAGE_REPO_NAME --image-ids "imageTag=$IMAGE_TAG" | jq -r ".imageDetails[0].imageDigest")
#      - IMAGE_URI=$REPOSITORY_URI@$DIGEST
      - sed -i "s/CONTAINER_NAME/$CONTAINER_NAME/" appspec.yaml
      - sed -i "s/CONTAINER_PORT/$CONTAINER_PORT/" appspec.yaml
      - sed -i "s/CONTAINER_PORT/$CONTAINER_PORT/" taskdef.json
      - sed -i "s/CONTAINER_NAME/$CONTAINER_NAME/" taskdef.json
      - sed -i "s/TASK_FAMILY/$TASK_FAMILY/" taskdef.json
      - echo Writing image definitions file...
      - printf '{\n"ImageURI":"%s"\n}' $REPOSITORY_URI:$IMAGE_TAG > imageDetail.json
#      - printf '{\n"ImageURI":"%s"\n}' $IMAGE_URI > imageDetail.json
artifacts:
  files:
    - imageDetail.json
    - appspec.yaml
    - taskdef.json
#  discard-paths: yes
